name: CI
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
jobs:
  root_static_analysis:
    name: Root Static Analysis
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Setup Node
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16.13
      - name: Install Yarn
        run: npm install --global yarn@1.22
      - name: Set Yarn cache directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn cache
        uses: actions/cache@v3.2.4
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-cache-
      - name: Install Node dependencies
        run: yarn install --frozen-lockfile
      - name: Lint files
        run: yarn --silent lint:files
  server_static_analysis:
    name: Server Static Analysis
    runs-on: ubuntu-20.04
    env:
      CARGO_INCREMENTAL: 0
      RUSTDOCFLAGS: -C panic=abort
      RUSTFLAGS: -C codegen-units=1 -C link-dead-code -C opt-level=0 -C overflow-checks=off -C panic=abort -Z panic_abort_tests -Z profile
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Setup Node
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16.13
      - name: Install Yarn
        run: npm install --global yarn@1.22
      - name: Set Yarn cache directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn cache
        uses: actions/cache@v3.2.4
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-cache-
      - name: Install Node dependencies
        run: yarn install --frozen-lockfile
      - name: Setup Cargo cache
        run: sudo chown -H --recursive $(id --name --user):$(id --group --name) ~/.cargo
      - name: Restore Cargo cache and artifacts
        id: restore-cargo-cache-and-artifacts
        uses: actions/cache@v3.2.4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git/db
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
            packages/server/target
          key: server-cargo-cache-and-artifacts-${{ hashFiles('packages/server/Cargo.lock') }}
      - name: Install Rust and Cargo
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly-2021-11-24
          default: true
          profile: minimal
          components: clippy, rustfmt
      - name: Install Rust dependencies
        run: cargo install --version 0.8.2 grcov || exit 0
      - name: Build
        if: steps.restore-cargo-cache-and-artifacts.outputs.cache-hit != 'true'
        run: yarn --silent build
        working-directory: packages/server
      - name: Lint files, scripts, and types
        run: yarn --silent lint
        working-directory: packages/server
      - name: Cleanup artifacts
        run: rm --force --recursive packages/server/target/{debug/{{.fingerpint,deps}/server-*,examples,incremental,.cargo-lock,server{,.d*}},.rustc_info.json}
  server_test:
    name: Server Test
    runs-on: ubuntu-20.04
    env:
      CARGO_INCREMENTAL: 0
      RUSTDOCFLAGS: -C panic=abort
      RUSTFLAGS: -C codegen-units=1 -C link-dead-code -C opt-level=0 -C overflow-checks=off -C panic=abort -Z panic_abort_tests -Z profile
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Setup Node
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16.13
      - name: Set Yarn cache directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn cache
        uses: actions/cache@v3.2.4
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-cache-
      - name: Install Node dependencies
        run: yarn install --frozen-lockfile
      - name: Setup Cargo cache
        run: sudo chown -H --recursive $(id --name --user):$(id --group --name) ~/.cargo
      - name: Restore Cargo cache and artifacts
        id: restore-cargo-cache-and-artifacts
        uses: actions/cache@v3.2.4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/git/db
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
            packages/server/target
          key: server-cargo-cache-and-artifacts-${{ hashFiles('packages/server/Cargo.lock') }}
      - name: Install Rust and Cargo
        uses: actions-rs/toolchain@v1.0.7
        with:
          toolchain: nightly-2021-11-24
          default: true
          profile: minimal
      - name: Install Rust dependencies
        run: cargo install --version 0.8.2 grcov || exit 0
      - name: Build
        if: steps.restore-cargo-cache-and-artifacts.outputs.cache-hit != 'true'
        run: yarn --silent build
        working-directory: packages/server
      - name: Test units
        run: yarn --silent test:units
        working-directory: packages/server
      - name: Generate code coverage report
        run: |
          mkdir coverage
          grcov --branch --ignore '/*' --ignore-not-existing --llvm --output-path coverage/lcov.info --source-dir . target
        working-directory: packages/server
      - name: Publish code coverage report
        uses: codecov/codecov-action@v3.1.0
        with:
          file: packages/server/coverage/lcov.info
          flags: server
      - name: Cleanup artifacts
        run: rm --force --recursive packages/server/target/{debug/{{.fingerpint,deps}/server-*,examples,incremental,.cargo-lock,server{,.d*}},.rustc_info.json}
  user_static_analysis:
    name: User Static Analysis
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Setup Node
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16.13
      - name: Set Yarn cache directory
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore Yarn cache
        uses: actions/cache@v3.2.4
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: yarn-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: yarn-cache-
      - name: Install Node dependencies
        run: yarn install --frozen-lockfile
      - name: Lint files, scripts, and styles
        run: yarn --silent lint
        working-directory: packages/user
